%%% ARES PR Launch Data Analysis %%%

%% get data
data = readtable("data/Pocket_Rocket_ARES_Data.csv");

% remove NaNs from data
gpsData = rmmissing( data(:, {'GPSLat', 'GPSlong', 'GPSAlt'}));
lat = gpsData{:, 'GPSLat'};
long = gpsData{:, 'GPSlong'};
alt = gpsData{:, 'GPSAlt'};

% check to make sure data is the same length
if size(lat) == size(long)
    disp(['size: ', string(size(lat))])
    disp('wahoo')
else
    disp('waaaaaaaa')
end

%% plot 2D GPS trajectory
figure;

hold on;
plot(long, lat, 'k.-', 'MarkerSize', 20)
plot(long(1), lat(1), 'g.-', 'MarkerSize', 20)
plot(long(end), lat(end), 'r.-', 'MarkerSize', 20)
hold off;

% label 2D plot
title('ARES 2D Flight Trajectory')
xlabel('longitude');
ylabel('lattitude');
grid on
savefig('figs/ARES_2d_traj')

%% geoplot
figure;
geoplot(lat, long, 'k.-', lat(1), long(1), 'g.', MarkerSize=15)
title('ARES 2D Flight Trajectory (GPS)')
savefig('figs/ARES_2d_geoplot_traj')

%% plot 3D GPS trajectory
figure;

% plot3(long, lat, alt, 'b.-') % lat long axes
% xlabel('longitude');
% ylabel('lattitude');
% zlabel('altitude');

% use haversine to change lat long into meters fromm start position
N = length(lat);
coordsConstLong = NaN(N, 2);
coordsConstLat = NaN(N, 2);
coordsStart = NaN(N, 2);
for i=1:N
    coordsConstLat(i,:) = [lat(1) long(i)];
    coordsConstLong(i,:) = [lat(i) long(1)];
    coordsStart(i,:) = [lat(1) long(1)];
end

x_long = NaN(N, 1);
y_lat = NaN(N, 1);
for i=1:N
    x_long(i) = haversine(coordsStart(i,:), coordsConstLat(i,:));
    y_lat(i) = haversine(coordsStart(i,:), coordsConstLong(i,:));
end

plot3(x_long, y_lat, alt, 'b.-') 
xlabel('x distance (m)'); % longitudinal 
ylabel('y distance (m)'); % lattitudinal
zlabel('altitude (m)');   % verticaltudinal
axis equal

title('ARES 3D Flight Trajectory (GPS)')
grid on

savefig('figs/ARES_3d_traj')

%% get 3D trajectory w/ accelerometer data
dataIMU = 1;


%% analyze vertical velocity w/ BME data
t = data{:, 'SystemMillis'}(:,1);
bmeAlt = data{:, 'BMEApproximateAlt'}(:,1);

% calculate descent velocity (v = dz/dt)
N = length(bmeAlt);
v_z = NaN(N, 1);
nEuler = 200;
for i = 1:N-nEuler
    v_z(i) = ( bmeAlt(i+nEuler)-bmeAlt(i) ) / ( (t(i+nEuler)-t(i))/1000 );
    % avg descent rate over the next 100 samples 
end
v_z(end) = 0;
disp(v_z(:,1)) 

% % implement moving average filter
% dt = 500; % ms
% sampleAvg = 50; % use avg across 50 samples (25 sec)
% coeff = ones(1, sampleAvg)/sampleAvg; 
% v_mvngAvg = filter(coeff, 1, v_z);
% fDelay = (length(coeff)-1)/2; % filter delay

% plot descent velocity over time
figure();
hold on;
plot(t/60000,v_z, LineWidth=1.5)
% plot((t-fDelay)/60000,v_mvngAvg, LineWidth=2)

grid on

% reverse y-axis direction and label plot
hAx=gca;
hAx.YDir='reverse';

% label plot
title('ARES Descent Rate Profile')
xlabel('time (min)')
ylabel('approx. descent rate (m/s)')

savefig('figs/ARES_descent_rate')